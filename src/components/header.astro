---
import { Icon } from "astro-icon";
//import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { NavItem } from "~/types";
import isologo from "~/assets/Iso_logo_for_Padawan.webp";
import logo from "~/assets/logo.webp";
import padawan from "~/assets/PaDawaN.webp"
const {idioma} = Astro.props;
const navItemsEs: Array<NavItem> = [
  { title: "Sobre Nosotros", url: "#ourway" },
  { title: "Servicios", url: "#ourServices" },
  {title:"Metodología",url:"#ourMetodology"},
  { title: "Equipo", url: "#ourTeam" },
  { title: "Contáctenos", url: "#contactUs" },
];
const navItemsEn: Array<NavItem> = [
  { title: "Our Way", url: "#ourway" },
  { title: "Services", url: "#ourServices" },
  {title:"Methodology",url:"#ourMetodology"},
  { title: "Team", url: "#ourTeam" },
  { title: "Contact Us", url: "#contactUs" },
];
const navItems = idioma == "en" ? navItemsEn : navItemsEs;
---

<header
  id="page-header"
  class="z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
>
<a href="/#" class="flex text-center" style="align-items: center;" id="logo">
  <img src={isologo.src} alt="Logo" class="w-12 h-12 visible"  />
  <img src={padawan.src} alt="Padawan" class="sm:inline hidden object-contain w-48 h-12 ml-4"  />
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url }) => (
              <li>
                <a class="text-sm" href={url}>
                  {title}
                </a>
              </li>
            ))
          }
           <a href="/" class="hover:text-white focus:outline-none" id="botonEs"><p class={idioma == "es" ? "text-purple-600" : "text-gray-300"}>ES</p></a>
           <span>|</span>
           <a href="/en" class="text-gray-300 hover:text-white focus:outline-none" id="botonEn"><p class={idioma == "en" ? "text-purple-600" : "text-gray-300"}>EN</p></a>
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" />
      </button>

    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" />
            </button>
          </header>
          <div class="flex justify-center">
              <img src={logo.src} alt="Logo" class="w-16 h-16 visible"  />
          </div>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url }) => (
                  <li>
                    <a class="block py-4 text-center text-xl" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
    
  </style>
</noscript>

<style>
  
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
  #logo {
    opacity: 0;
    transition: opacity 0.5s ease; /* Añadir transición de 0.5 segundos */
  }
  #logo.visible {
    opacity: 1;
  }
</style>